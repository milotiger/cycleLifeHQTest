{
  "_args": [
    [
      {
        "raw": "i18n-js@http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
        "scope": null,
        "escapedName": "i18n-js",
        "name": "i18n-js",
        "rawSpec": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
        "spec": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
        "type": "remote"
      },
      "/opt/sharetribe/client"
    ]
  ],
  "_from": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
  "_id": "i18n-js@0.0.0",
  "_inCache": true,
  "_location": "/i18n-js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "i18n-js@http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
    "scope": null,
    "escapedName": "i18n-js",
    "name": "i18n-js",
    "rawSpec": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
    "spec": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
  "_shasum": "a06affb1bcdd4076d147522293c4f0adad532fea",
  "_shrinkwrap": null,
  "_spec": "i18n-js@http://github.com/sharetribe/i18n-js/archive/interpolation-mode.tar.gz",
  "_where": "/opt/sharetribe/client",
  "bugs": {
    "url": "https://github.com/fnando/i18n-js/issues"
  },
  "dependencies": {},
  "description": "[![Build Status](http://img.shields.io/travis/fnando/i18n-js.svg?style=flat-square)](https://travis-ci.org/fnando/i18n-js) [![Code Climate](http://img.shields.io/codeclimate/github/fnando/i18n-js.svg?style=flat-square)](https://codeclimate.com/github/fnando/i18n-js) [![Gitter](https://img.shields.io/badge/gitter-join%20chat-1dce73.svg?style=flat-square)](https://gitter.im/fnando/i18n-js)",
  "devDependencies": {
    "jasmine-node": "*"
  },
  "homepage": "https://github.com/fnando/i18n-js#readme",
  "main": "app/assets/javascripts/i18n.js",
  "name": "i18n-js",
  "optionalDependencies": {},
  "readme": "# I18n.js\n\n[![Build Status](http://img.shields.io/travis/fnando/i18n-js.svg?style=flat-square)](https://travis-ci.org/fnando/i18n-js)\n[![Code Climate](http://img.shields.io/codeclimate/github/fnando/i18n-js.svg?style=flat-square)](https://codeclimate.com/github/fnando/i18n-js)\n[![Gitter](https://img.shields.io/badge/gitter-join%20chat-1dce73.svg?style=flat-square)](https://gitter.im/fnando/i18n-js)\n\nIt's a small library to provide the Rails I18n translations on the JavaScript.\n\nFeatures:\n\n- Pluralization\n- Date/Time localization\n- Number localization\n- Locale fallback\n- Asset pipeline support\n- Lots more! :)\n\n## Version Notice\nThe `master` branch (including this README) is for latest `3.0.0.rc` instead of `2.x`.\n\n\n## Usage\n\n### Installation\n\n#### Rails app\n\nAdd the gem to your Gemfile.\n```ruby\nsource \"https://rubygems.org\"\ngem \"rails\", \"your_rails_version\"\n# You only need this RC version constraint during the development of `3.0.0`, once stable version is released you can remove `rc11` suffix\n# `3.0.0.rc11` is the latest version of released RC version when this entry is changed, you might want to change it later\ngem \"i18n-js\", \">= 3.0.0.rc11\"\n```\n\n#### Rails app with [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html)\n\nIf you're using the [asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html),\nthen you must add the following line to your `app/assets/javascripts/application.js`.\n\n```javascript\n//\n// This is optional (in case you have `I18n is not defined` error)\n// If you want to put this line, you must put it BEFORE `i18n/translations`\n//= require i18n\n// Some people even need to add the extension to make it work, see https://github.com/fnando/i18n-js/issues/283\n//= require i18n.js\n//\n// This is a must\n//= require i18n/translations\n```\n\n#### Rails app without [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html)\n\n\nFirst, put this in your `application.html` (layout file).\nThen get the JS files following the instructions below.\n```erb\n<%# This is just an example, you can put `i18n.js` and `translations.js` anywhere you like %>\n<%# Unlike the Asset Pipeline example, you need to require both **in order** %>\n<%= javascript_include_tag \"i18n\" %>\n<%= javascript_include_tag \"translations\" %>\n```\n\n**There are two ways to get `translations.js`.**\n\n1. This `translations.js` file can be automatically generated by the `I18n::JS::Middleware`.  \n  Just add `config.middleware.use I18n::JS::Middleware` to your `config/application.rb` file.  \n2. If you can't or prefer not to generate this file,\n  you can move the middleware line to your `config/environments/development.rb` file\n  and run `rake i18n:js:export` before deploying.\n  This will export all translation files, including the custom scopes\n  you may have defined on `config/i18n-js.yml`.  \n  If `I18n.available_locales` is set (e.g. in your Rails `config/application.rb` file)\n  then only the specified locales will be exported.  \n  Current version of `i18n.js` will also be exported to avoid version mismatching by downloading.\n\n#### Export Configuration (For translations)\n\nExported translation files generated by `I18n::JS::Middleware` or `rake i18n:js:export` can be customized with config file `config/i18n-js.yml`  \n(use `rails generate i18n:js:config` to create it).  \nYou can even get more files generated to different folders and with different translations to best suit your needs.  \nThe config file also affects developers using Asset Pipeline to require translations.  \nExcept the option `file`, since all translations are required by adding `//= require i18n/translations`.\n\nExamples:\n```yaml\ntranslations:\n- file: 'public/javascripts/path-to-your-messages-file.js'\n  only: '*.date.formats'\n- file: 'public/javascripts/path-to-your-second-file.js'\n  only: ['*.activerecord', '*.admin.*.title']\n```\n\nIf `only` is omitted all the translations will be saved. Also, make sure you add that initial `*`; it specifies that all languages will be exported. If you want to export only one language, you can do something like this:\n```yaml\ntranslations:\n- file: 'public/javascripts/en.js'\n  only: 'en.*'\n- file: 'public/javascripts/pt-BR.js'\n  only: 'pt-BR.*'\n```\n\nOptionally, you can auto generate a translation file per available locale if you specify the `%{locale}` placeholder.\n```yaml\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n- file: \"public/javascripts/frontend/i18n/%{locale}.js\"\n  only: ['*.frontend', '*.users.*']\n```\n\nYou can also include ERB in your config file.\n```yaml\ntranslations:\n<% Widgets.each do |widget| %>\n- file: <%= \"'#{widget.file}'\" %>\n  only: <%= \"'#{widget.only}'\" %>\n<% end %>\n```\n\nYou are able to exclude certain phrases or whole groups of phrases by\nspecifying the YAML key(s) in the `except` configuration option. The outputted\nJS translations file (exported or generated by the middleware) will omit any\nkeys listed in `except` configuration param:\n\n```yaml\ntranslations:\n  - except: ['*.active_admin', '*.ransack', '*.activerecord.errors']\n```\n\n\n#### Export Configuration (For other things)\n\n- `I18n::JS.config_file_path`\n  Expected Type: `String`  \n  Default: `config/i18n-js.yml`  \n  Behaviour: Try to read the config file from that location  \n\n- `I18n::JS.export_i18n_js_dir_path`\n  Expected Type: `String`  \n  Default: `public/javascripts`  \n  Behaviour:  \n  - Any `String`: considered as a relative path for a folder to `Rails.root` and export `i18n.js` to that folder for `rake i18n:js:export`\n  - Any non-`String` (`nil`, `false`, `:none`, etc): Disable `i18n.js` exporting\n\n- `I18n::JS.sort_translation_keys`\n  Expected Type: `Boolean`\n  Default: `true`\n  Behaviour:\n  - Sets whether or not to deep sort all translation keys in order to generate identical output for the same translations\n  - Set to true to ensure identical asset fingerprints for the asset pipeline\n\n- You may also set `export_i18n_js` and `sort_translation_keys` in your config file, e.g.:\n\n```yaml\nexport_i18n_js: false\n# OR\nexport_i18n_js: \"my/path\"\n\nsort_translation_keys: false\n\ntranslations:\n  - ...\n```\n\nTo find more examples on how to use the configuration file please refer to the tests.\n\n#### Fallbacks\n\nIf you specify the `fallbacks` option, you will be able to fill missing translations with those inside fallback locale(s).  \nDefault value is `true`.\n\nExamples:\n```yaml\nfallbacks: true\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nThis will enable merging fallbacks into each file. (set to `false` to disable).\nIf you use `I18n` with fallbacks, the fallbacks defined there will be used.\nOtherwise `I18n.default_locale` will be used.\n\n```yaml\nfallbacks: :de\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nHere, the specified locale `:de` will be used as fallback for all locales.\n\n```yaml\nfallbacks:\n  fr: [\"de\", \"en\"]\n  de: \"en\"\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nFallbacks defined will be used, if not defined (e.g. `:pl`) `I18n.fallbacks` or `I18n.default_locale` will be used.\n\n```yaml\nfallbacks: :default_locale\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nSetting the option to `:default_locale` will enforce the fallback to use the `I18n.default_locale`, ignoring `I18n.fallbacks`.\n\nExamples:\n```yaml\nfallbacks: false\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nYou must disable this feature by setting the option to `false`.\n\nTo find more examples on how to use the configuration file please refer to the tests.\n\n\n#### Namespace\n\nSetting the `namespace` option will change the namespace of the output Javascript file to something other than `I18n`.\nThis can be useful in no-conflict scenarios. Example:\n\n```yaml\ntranslations:\n- file: \"public/javascripts/i18n/translations.js\"\n  namespace: \"MyNamespace\"\n```\n\nwill create:\n\n```\nMyNamespace.translations || (MyNamespace.translations = {});\nMyNamespace.translations[\"en\"] = { ... }\n```\n\n\n#### Pretty Print\n\nSet the `pretty_print` option if you would like whitespace and indentation in your output file (default: false)\n\n```yaml\ntranslations:\n- file: \"public/javascripts/i18n/translations.js\"\n  pretty_print: true\n```\n\n\n#### Javscript Deep Merge (:js_extend option)\n\nBy default, the output file Javascript will call the `I18n.extend` method to ensure that newly loaded locale\nfiles are deep-merged with any locale data already in memory. To disable this either globally or per-file,\nset the `js_extend` option to false\n\n```yaml\njs_extend: false  # this will disable Javascript I18n.extend globally\ntranslations:\n- file: \"public/javascripts/i18n/translations.js\"\n  js_extend: false  # this will disable Javascript I18n.extend for this file\n```\n\n\n#### Vanilla JavaScript\n\nJust add the `i18n.js` file to your page. You'll have to build the translations object\nby hand or using your favorite programming language. More info below.\n\n\n#### Via NPM with webpack and CommonJS\n\nAdd the following line to your package.json dependencies (where version is the version you want - n.b. npm install requires it to be the gzipped tarball, see [npm install](https://www.npmjs.org/doc/cli/npm-install.html))\n```javascript\n\"i18n-js\": \"http://github.com/fnando/i18n-js/archive/v3.0.0.rc12.tar.gz\"\n```\nRun npm install then use via\n```javascript\nvar i18n = require(\"i18n-js\");\n```\n\n\n### Setting up\n\nYou **don't** need to set up a thing. The default settings will work just okay. But if you want to split translations into several files or specify specific contexts, you can follow the rest of this setting up section.\n\nSet your locale is easy as\n```javascript\nI18n.defaultLocale = \"pt-BR\";\nI18n.locale = \"pt-BR\";\nI18n.currentLocale();\n// pt-BR\n```\n\n**NOTE:** You can now apply your configuration **before I18n** is loaded like this:\n```javascript\nI18n = {} // You must define this object in top namespace, which should be `window`\nI18n.defaultLocale = \"pt-BR\";\nI18n.locale = \"pt-BR\";\n\n// Load I18n from `i18n.js`, `application.js` or whatever\n\nI18n.currentLocale();\n// pt-BR\n```\n\nIn practice, you'll have something like the following in your `application.html.erb`:\n\n```erb\n<script type=\"text/javascript\">\n  I18n.defaultLocale = \"<%= I18n.default_locale %>\";\n  I18n.locale = \"<%= I18n.locale %>\";\n</script>\n```\n\nYou can use translate your messages:\n\n```javascript\nI18n.t(\"some.scoped.translation\");\n// or translate with explicit setting of locale\nI18n.t(\"some.scoped.translation\", {locale: \"fr\"});\n```\n\nYou can also interpolate values:\n\n```javascript\nI18n.t(\"hello\", {name: \"John Doe\"});\n```\nYou can set default values for missing scopes:\n```javascript\n// simple translation\nI18n.t(\"some.missing.scope\", {defaultValue: \"A default message\"});\n\n// with interpolation\nI18n.t(\"noun\", {defaultValue: \"I'm a {{noun}}\", noun: \"Mac\"});\n```\n\nThere are two interpolation modes:\n\n`inline` mode (default): Replaces the placeholders from the original string with stringified values.\n\n```javascript\nI18n.interpolationMode = \"inline\";\nI18n.t(\"i_am_years_old\", {age: 30}) // => \"I'm 30 years old\"\n```\n\n`split` mode: Splits the original string by placeholders and adds the values in the resulting array without stringifing them.\n\n```javascript\nI18n.interpolationMode = \"split\";\nI18n.t(\"i_am_years_old\", {age: 30}) // => [\"I'm \", 30, \"years old\"]\n```\n\nYou might need to use the `split` if you need to inject HTML elements in the translations. This way, if you are using React, you can avoid using `setDangerouslyInnerHtml` function:\n\n```javascript\n# Translations\n// click_here_to_read_more: \"Click %{here} to read more!\"\n// click_here_link: \"here\"\n\nI18n.interpolationMode = \"split\";\nI18n.t(\"click_here_to_read_more\", {link: a({href: \"www.google.com\"}, t(\"click_here_link\"))})\n  // => [\"Click \" [object Object], \" to read more!\"]\n```\n\nYou can also provide a list of default fallbacks for missing scopes:\n\n```javascript\n// As a scope\nI18n.t(\"some.missing.scope\", {defaults: [{scope: \"some.existing.scope\"}]});\n\n// As a simple translation\nI18n.t(\"some.missing.scope\", {defaults: [{message: \"Some message\"}]});\n```\n\nDefault values must be provided as an array of hashs where the key is the\ntype of translation desired, a `scope` or a `message`. The translation returned\nwill be either the first scope recognized, or the first message defined.\n\nThe translation will fallback to the `defaultValue` translation if no scope\nin `defaults` matches and if no default of type `message` is found.\n\nTranslation fallback can be enabled by enabling the `I18n.fallbacks` option:\n\n```erb\n<script type=\"text/javascript\">\n  I18n.fallbacks = true;\n</script>\n```\n\nBy default missing translations will first be looked for in less\nspecific versions of the requested locale and if that fails by taking\nthem from your `I18n.defaultLocale`.\n\n```javascript\n// if I18n.defaultLocale = \"en\" and translation doesn't exist\n// for I18n.locale = \"de-DE\" this key will be taken from \"de\" locale scope\n// or, if that also doesn't exist, from \"en\" locale scope\nI18n.t(\"some.missing.scope\");\n```\n\nCustom fallback rules can also be specified for a particular language. There\nare three different ways of doing it so:\n\n```javascript\nI18n.locales.no = [\"nb\", \"en\"];\nI18n.locales.no = \"nb\";\nI18n.locales.no = function(locale){ return [\"nb\"]; };\n```\n\nBy default a missing translation will be displayed as\n\n    [missing \"name of scope\" translation]\n\nWhile you are developing or if you do not want to provide a translation\nin the default language you can set\n\n```javascript\nI18n.missingBehaviour='guess';\n```\n\nthis will take the last section of your scope and guess the intended value.\nCamel case becomes lower cased text and underscores are replaced with space\n\n    questionnaire.whatIsYourFavorite_ChristmasPresent\n\nbecomes \"what is your favorite Christmas present\"\n\nIn order to still detect untranslated strings, you can\ni18n.missingTranslationPrefix to something like:\n```javascript\nI18n.missingTranslationPrefix = 'EE: ';\n```\n\nAnd result will be:\n```javascript\n\"EE: what is your favorite Christmas present\"\n```\n\nThis will help you doing automated tests against your localisation assets.\n\nSome people prefer returning `null` for missing translation:\n```javascript\nI18n.missingTranslation = function () { return undefined; };\n```\n\nPluralization is possible as well and by default provides English rules:\n\n```javascript\nI18n.t(\"inbox.counting\", {count: 10}); // You have 10 messages\n```\n\nThe sample above expects the following translation:\n\n```yaml\nen:\n  inbox:\n    counting:\n      one: You have 1 new message\n      other: You have {{count}} new messages\n      zero: You have no messages\n```\n\n**NOTE:** Rails I18n recognizes the `zero` option.\n\nIf you need special rules just define them for your language, for example Russian, just add a new pluralizer:\n\n```javascript\nI18n.pluralization[\"ru\"] = function (count) {\n  var key = count % 10 == 1 && count % 100 != 11 ? \"one\" : [2, 3, 4].indexOf(count % 10) >= 0 && [12, 13, 14].indexOf(count % 100) < 0 ? \"few\" : count % 10 == 0 || [5, 6, 7, 8, 9].indexOf(count % 10) >= 0 || [11, 12, 13, 14].indexOf(count % 100) >= 0 ? \"many\" : \"other\";\n  return [key];\n};\n```\n\nYou can find all rules on <http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html>.\n\nIf you're using the same scope over and over again, you may use the `scope` option.\n\n```javascript\nvar options = {scope: \"activerecord.attributes.user\"};\n\nI18n.t(\"name\", options);\nI18n.t(\"email\", options);\nI18n.t(\"username\", options);\n```\n\nYou can also provide an array as scope.\n\n```javascript\n// use the greetings.hello scope\nI18n.t([\"greetings\", \"hello\"]);\n```\n\n#### Number formatting\n\nSimilar to Rails helpers, you have localized number and currency formatting.\n\n```javascript\nI18n.l(\"currency\", 1990.99);\n// $1,990.99\n\nI18n.l(\"number\", 1990.99);\n// 1,990.99\n\nI18n.l(\"percentage\", 123.45);\n// 123.450%\n```\n\nTo have more control over number formatting, you can use the\n`I18n.toNumber`, `I18n.toPercentage`, `I18n.toCurrency` and `I18n.toHumanSize`\nfunctions.\n\n```javascript\nI18n.toNumber(1000);     // 1,000.000\nI18n.toCurrency(1000);   // $1,000.00\nI18n.toPercentage(100);  // 100.000%\n```\n\nThe `toNumber` and `toPercentage` functions accept the following options:\n\n- `precision`: defaults to `3`\n- `separator`: defaults to `.`\n- `delimiter`: defaults to `,`\n- `strip_insignificant_zeros`: defaults to `false`\n\nSee some number formatting examples:\n\n```javascript\nI18n.toNumber(1000, {precision: 0});                   // 1,000\nI18n.toNumber(1000, {delimiter: \".\", separator: \",\"}); // 1.000,000\nI18n.toNumber(1000, {delimiter: \".\", precision: 0});   // 1.000\n```\n\nThe `toCurrency` function accepts the following options:\n\n- `precision`: sets the level of precision\n- `separator`: sets the separator between the units\n- `delimiter`: sets the thousands delimiter\n- `format`: sets the format of the output string\n- `unit`: sets the denomination of the currency\n- `strip_insignificant_zeros`: defaults to `false`\n- `sign_first`: defaults to `true`\n\nYou can provide only the options you want to override:\n\n```javascript\nI18n.toCurrency(1000, {precision: 0}); // $1,000\n```\n\nThe `toHumanSize` function accepts the following options:\n\n- `precision`: defaults to `1`\n- `separator`: defaults to `.`\n- `delimiter`: defaults to `\"\"`\n- `strip_insignificant_zeros`: defaults to `false`\n- `format`: defaults to `%n%u`\n\n<!---->\n\n```javascript\nI18n.toHumanSize(1234); // 1KB\nI18n.toHumanSize(1234 * 1024); // 1MB\n```\n\n\n#### Date formatting\n\n```javascript\n// accepted formats\nI18n.l(\"date.formats.short\", \"2009-09-18\");           // yyyy-mm-dd\nI18n.l(\"time.formats.short\", \"2009-09-18 23:12:43\");  // yyyy-mm-dd hh:mm:ss\nI18n.l(\"time.formats.short\", \"2009-11-09T18:10:34\");  // JSON format with local Timezone (part of ISO-8601)\nI18n.l(\"time.formats.short\", \"2009-11-09T18:10:34Z\"); // JSON format in UTC (part of ISO-8601)\nI18n.l(\"date.formats.short\", 1251862029000);          // Epoch time\nI18n.l(\"date.formats.short\", \"09/18/2009\");           // mm/dd/yyyy\nI18n.l(\"date.formats.short\", (new Date()));           // Date object\n```\n\nYou can also add placeholders to the date format:\n\n```javascript\nI18n.translations[\"en\"] = {\n  date: {\n    formats: {\n      ordinal_day: \"%B %{day}\"\n    }\n  }\n}\nI18n.l(\"date.formats.ordinal_day\", \"2009-09-18\", { day: '18th' }); // Sep 18th\n```\n\nIf you prefer, you can use the `I18n.strftime` function to format dates.\n\n```javascript\nvar date = new Date();\nI18n.strftime(date, \"%d/%m/%Y\");\n```\n\nThe accepted formats are:\n\n    %a  - The abbreviated weekday name (Sun)\n    %A  - The full weekday name (Sunday)\n    %b  - The abbreviated month name (Jan)\n    %B  - The full month name (January)\n    %d  - Day of the month (01..31)\n    %-d - Day of the month (1..31)\n    %H  - Hour of the day, 24-hour clock (00..23)\n    %-H - Hour of the day, 24-hour clock (0..23)\n    %I  - Hour of the day, 12-hour clock (01..12)\n    %-I - Hour of the day, 12-hour clock (1..12)\n    %m  - Month of the year (01..12)\n    %-m - Month of the year (1..12)\n    %M  - Minute of the hour (00..59)\n    %-M - Minute of the hour (0..59)\n    %p  - Meridian indicator (AM  or  PM)\n    %S  - Second of the minute (00..60)\n    %-S - Second of the minute (0..60)\n    %w  - Day of the week (Sunday is 0, 0..6)\n    %y  - Year without a century (00..99)\n    %-y - Year without a century (0..99)\n    %Y  - Year with century\n    %z  - Timezone offset (+0545)\n\nCheck out `spec/*.spec.js` files for more examples!\n\n## Using multiple exported translation files on a page.\nThis method is useful for very large apps where a single contained translations.js file is not desirable. Examples would be a global translations file and a more specific route translation file.\n\n### Rails without asset pipeline\n1. Setup your `config/i18n-js.yml` to have multiple files and try to minimize any overlap.\n\n  ```yaml\n  sort_translation_keys: true\n  fallbacks: false\n\n  translations:\n    + file: \"app/assets/javascript/nls/welcome.js\"\n      only:\n        + '*.welcome.*'\n    \n    + file: \"app/assets/javascript/nls/albums.js\"\n      only:\n        + '*.albums.*'\n\n    + file: \"app/assets/javascript/nls/global.js\"\n      only:\n        + '*'\n      # Exempt any routes specific translations from being\n      # included in the global translation file\n      except:\n        + '*.welcome.*'\n        + '*.albums.*'\n  ```\n  When `rake i18n:js:export` is executed it will create 3 translations files that can be loaded via the `javascript_include_tag`\n\n2. Add the `javascript_include_tag` to your layout and to any route specific files that will require it.\n  ```ruby\n    # views/layouts/application.html.erb\n    <%= javascript_include_tag(\n          \"i18n\"\n          \"nls/global\"\n        ) %>\n  ```\n  and in the route specific\n\n  ```ruby\n    # views/welcome/index.html.erb\n    <%= javascript_include_tag(\n          \"nls/welcome\"\n        ) %>\n  ```\n\n3. Make sure that you add these files to your `config/application.rb`\n\n  ```ruby\n    config.assets.precompile += %w(\n      i18n\n      nls/*\n    )\n  ```\n\n### Using require.js / r.js\n\nTo use this with require.js we are only going to change a few things from above.\n\n1. In your `config/i18n-js.yml` we need to add a better location for the i18n to be exported. You want to use this location so that it can be properly precompiled by r.js.\n\n  ```yaml\n  export_i18n_js: \"app/assets/javascript/nls\"\n  ```\n\n2. In your `config/require.yml` we need to add a map, shim all the translations, and include them into the appropriate modules\n\n  ```yaml\n  # In your maps add (if you do not have this you will need to add it)\n  map:\n    '*':\n      i18n: 'nls/i18n'\n\n  # In your shims\n  shims:\n    nls/welcome:\n      deps:\n        + i18n\n\n    nls/global:\n      deps:\n        + i18n\n\n  # Finally in your modules \n  modules:\n    + name: 'application'\n      include:\n        + i18n\n        + 'nls/global'\n    \n    + name: 'welcome'\n      exclude:\n        + application\n      include:\n        + 'nls/welcome'\n  ```\n3. When `rake assets:precompile` is executed it will optimize the translations into the correct modules so they are loaded with their assigned module, and loading them with requirejs is as simple as requiring any other shim.\n\n  ```javascript\n  define(['welcome/other_asset','nls/welcome'], function (otherAsset){\n      // ...\n  });\n  ```\n4. (optional) As an additional configuration we can make a task to be run before the requirejs optimizer. This will allow any automated scripts that run the requirejs optimizer to export the strings before we run r.js\n\n  ```rake\n  # lib/tasks/i18n.rake\n  Rake::Task[:'i18n:js:export'].prerequisites.clear\n  task :'i18n:js:export' => :'i18n:js:before_export'\n  task :'requirejs:precompile:external' => :'i18n:js:export'\n\n  namespace :i18n do\n    namespace :js do\n      task :before_export => :'assets:environment' do\n        I18n.load_path += Dir[Rails.root.join('config', 'locales', '*.{yml,rb}')]\n        I18n.backend.load_translations\n      end\n    end\n  end\n  ```\n\n## Using I18n.js with other languages (Python, PHP, ...)\n\nThe JavaScript library is language agnostic; so you can use it with PHP, Python, [your favorite language here].\nThe only requirement is that you need to set the `translations` attribute like following:\n\n```javascript\nI18n.translations = {};\n\nI18n.translations[\"en\"] = {\n  message: \"Some special message for you\"\n}\n\nI18n.translations[\"pt-BR\"] = {\n  message: \"Uma mensagem especial para você\"\n}\n```\n\n## Known Issues\n\n### Missing translations in precompiled file(s) after adding any new locale file\n\nDue to the design of `sprockets`:\n\n- `depend_on` only takes file paths, not directory paths\n- registered `preprocessors` are only run when the fingerprint of any asset file, including `.erb` files, is changed\n\nThis means that new locale files will not be detected, and so they will not trigger a i18n-js refresh. There are a few approaches to work around this:\n\n1. You can force i18n-js to update its translations by completely clearing the assets cache. Use one of the following:\n\n  ```bash\n  $ rake assets:clobber\n  # Or, with older versions of Rails:\n  $ rake tmp:cache:clear\n  ```\n\n    These commands will remove *all* fingerprinted assets, and you will have to recompile them with\n\n    ```\n    $ rake assets:precompile\n    ```\n    or similar commands.  If you are precompiling assets on the target machine(s), cached pages may be broken by this, so they will need to be refreshed.\n    \n2. You can change something in a different locale file.\n\n3. Finally, you can change `config.assets.version`.\n\n**Note:** See issue [#213](https://github.com/fnando/i18n-js/issues/213) for more details and discussion of this issue.\n\n## Maintainer\n\n- Nando Vieira - <http://nandovieira.com.br>\n\n## Contributing\n\nOnce you've made your great commits:\n\n1. [Fork](http://help.github.com/forking/) I18n.js\n2. Create a branch with a clear name\n3. Make your changes (Please also add/change spec, README and CHANGELOG if applicable)\n4. Push changes to the created branch\n5. [Create an Pull Request](http://github.com/fnando/i18n-js/pulls)\n6. That's it!\n\nPlease respect the indentation rules and code style.\nAnd use 2 spaces, not tabs. And don't touch the versioning thing.\n\n## Running tests\n\nYou can run I18n tests using Node.js or your browser.\n\nTo use Node.js, install the `jasmine-node` library:\n\n    $ npm install jasmine-node\n\nThen execute the following command from the lib's root directory:\n\n    $ npm test\n\nTo run using your browser, just open the `spec/js/specs.html` file.\n\nYou can run both Ruby and JavaScript specs with `rake spec`.\n\n## License\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fnando/i18n-js.git"
  },
  "scripts": {
    "test": "jasmine-node spec/js"
  },
  "version": "0.0.0"
}
